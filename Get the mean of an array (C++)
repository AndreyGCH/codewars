LINK
https://www.codewars.com/kata/reviews/5b339248f94d46d5cd001de1/groups/5c75b48b3226d000010d89b2

**** Objective C ****

SOLUTION

#import <Foundation/Foundation.h>
int get_average(int vector[])
{
  int average = 0;
  int value = 0;
  int pos = 0;
  for (int i = 0; i < 4; ++i){ 
    value += vector[i];
  }
  value = value / (sizeof(vector) / 2);
  return value;
}

TEST

#import <Foundation/Foundation.h>
#include <stdlib.h>

@implementation TestSuite
    - (void) tests1
    {
        int arr[4];
        arr[0] = 2;
        arr[1] = 2;
        arr[2] = 2;
        arr[3] = 2;
        
        UKIntsEqual(2, get_average(arr));
    }
@end

**** C++ ****

SOLUTION

int get_average(std::vector <int> marks)
{
  int average = 0;
  for(int i = 0; i < marks.size(); i++) {
    average += marks[i];
  }
  return average / marks.size();
}

TEST

#include <vector>
#include <cstdlib>
#include <ctime>
#include <numeric>

Describe(array_average)
{
    It(basic_test)
    {
        Assert::That(get_average(std::vector <int>{2, 2, 2, 2}), Equals(2));
        Assert::That(get_average(std::vector <int>{1, 5, 87, 45, 8, 8}), Equals(25));
        Assert::That(get_average(std::vector <int>{2,5,13,20,16,16,10}), Equals(11));
        Assert::That(get_average(std::vector <int>{1,2,15,15,17,11,12,17,17,14,13,15,6,11,8,7}), Equals(11));
    }
    
    It(random_test)
    {
      srand(time(0));
      for(int i = 0; i < 100; i++)
        {
            std::vector<int> random_input;
            int randomTestInputSize = 3 + rand() % 15;
            for(int i = 0; i < randomTestInputSize; i++)
            {
                random_input.push_back(1 + rand() % 100);
            }
            int e = accumulate(random_input.begin(), random_input.end(), 0.0)/random_input.size();
            Assert::That(get_average(random_input), Equals(e));
        }
     }
};
